# -*- org-pretty-entities-include-sub-superscripts: nil; -*-
				 Notes

* Variables in our instruction
** Op, Vj, Vk, Dest, Imm
* RS variables (defined on *Page 97* of 4th edition)
** Op, Qj, Qk, Vj, Vk, Addr, Busy
* Example of RS, ROB, and RegFile given on *Page 110* of 4th edition
* ROB variables (ROB is 1-indexed)
** Busy, Instr, State, Dest, Value
* RegFile variables
** ROB_index, Busy, Value
* Steps involved in instruction execution given on *Page 106* and *Page 113* of 4th edition
* Branch Speculation:
** In issue stage
*** Set the speculative bit of entries after a branch instruction is inserted in the ROB
**** we will keep a *speculation* variable *which will be set* once a branch is inserted into ROB
**** all the entries (at all points of time) will have their speculative bit = speculation variable
** In commit stage, when a branch reaches the head of ROB
*** flush all ROB entries if this branch is mispredicted (by checking the calculated address and the instruction of next instrution in ROB?)
**** *reset* the speculation varibale
**** also, restart issuing instructions from the *correct address* (depending on branch taken or not taken)
*** finish the branch if it is correctly predicted => reset the speculative bit in the successive instructions (until the next branch instruction?)
**** *reset* the speculation variable


#Devesh: Are we taking care of writing result for store operations only when we reach the head? This is because of branch speculation.
* Program Notes
** ExeModule.py
*** _setRSEntryForImm
**** 
* Refactoring Notes
** VVIP Note: Compilation buffer for Simulator.py has 13118 lines
*** Now it is 12656 lines
*** Now it is 6881 lines
*** Now it is 6800 lines
*** 6867
*** Input and Output wonly
** DONE ExeModule.py
   CLOCK: [2012-12-06 Thu 15:21]--[2012-12-06 Thu 16:04] =>  0:43
   CLOCK: [2012-12-06 Thu 14:36]--[2012-12-06 Thu 15:21] =>  0:45
*** DONE Change the name of the module and class
*** DONE Add docstrings
    CLOCK: [2012-12-06 Thu 23:01]--[2012-12-06 Thu 23:10] =>  0:09
    CLOCK: [2012-12-06 Thu 22:33]--[2012-12-06 Thu 23:01] =>  0:28
    CLOCK: [2012-12-06 Thu 22:03]--[2012-12-06 Thu 22:20] =>  0:17
    CLOCK: [2012-12-06 Thu 21:29]--[2012-12-06 Thu 21:47] =>  0:18
** DONE func_unit.py
*** DONE Unit tests
    CLOCK: [2012-12-06 Thu 16:04]--[2012-12-06 Thu 17:20] =>  1:16
*** DONE Change CompFunc name
** DONE load_store_unit.py
   CLOCK: [2012-12-06 Thu 19:43]--[2012-12-06 Thu 20:14] =>  0:31
   CLOCK: [2012-12-06 Thu 17:20]--[2012-12-06 Thu 18:47] =>  1:27
*** DONE Clean up execute()
** DONE ROB.py
*** DONE Add docstrings
    CLOCK: [2012-12-06 Thu 20:18]--[2012-12-06 Thu 21:21] =>  1:03
*** DONE Change every '10' to ROB_MAX_SIZE
** DONE Check output
   CLOCK: [2012-12-06 Thu 23:10]--[2012-12-06 Thu 23:50] =>  0:40
** DONE Processor
   CLOCK: [2012-12-07 Fri 00:00]--[2012-12-07 Fri 00:01] =>  0:01
*** DONE Docstrings
    CLOCK: [2012-12-06 Thu 23:56]--[2012-12-07 Fri 00:00] =>  0:04
** DONE Break InstrUnit into Fetch and Decode
   CLOCK: [2012-12-07 Fri 00:00]--[2012-12-07 Fri 00:45] =>  0:45
** DONE Move execution stages into different classes
   CLOCK: [2012-12-07 Fri 01:17]--[2012-12-07 Fri 02:11] =>  0:54
   CLOCK: [2012-12-07 Fri 00:45]--[2012-12-07 Fri 01:17] =>  0:32
** DONE Rename write_data_to_CDB to write_results-*
   CLOCK: [2012-12-07 Fri 02:12]--[2012-12-07 Fri 02:17] =>  0:05
** DONE simulator.py variable names
   CLOCK: [2012-12-07 Fri 02:17]--[2012-12-07 Fri 02:19] =>  0:02
** DONE Call modules as stages
** DONE Turn off all printlining
   CLOCK: [2012-12-07 Fri 02:19]--[2012-12-07 Fri 02:34] =>  0:15
** DONE What is this controller???
** DONE Name it as ExecutionModule instead of ExecuteModule
** TODO decode stage docstrings
** TODO issue stage cleanup
** DONE CPI
** Multi issue
